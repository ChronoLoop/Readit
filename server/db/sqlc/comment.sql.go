// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: comment.sql

package dbconnection

import (
	"context"
	"database/sql"
	"time"
)

const createPostComment = `-- name: CreatePostComment :one
INSERT INTO post_comments (
    user_id,
    post_id,
    text,
    parent_id
) VALUES (
    $1, $2, $3, $4
) RETURNING created_at, updated_at, deleted_at, id, post_id, user_id, text, parent_id
`

type CreatePostCommentParams struct {
	UserID   int64         `json:"user_id"`
	PostID   int64         `json:"post_id"`
	Text     string        `json:"text"`
	ParentID sql.NullInt64 `json:"parent_id"`
}

func (q *Queries) CreatePostComment(ctx context.Context, arg CreatePostCommentParams) (PostComment, error) {
	row := q.db.QueryRowContext(ctx, createPostComment,
		arg.UserID,
		arg.PostID,
		arg.Text,
		arg.ParentID,
	)
	var i PostComment
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.ParentID,
	)
	return i, err
}

const findPostCommentById = `-- name: FindPostCommentById :one
SELECT created_at, updated_at, deleted_at, id, post_id, user_id, text, parent_id
FROM post_comments
WHERE id = $1
`

func (q *Queries) FindPostCommentById(ctx context.Context, id int64) (PostComment, error) {
	row := q.db.QueryRowContext(ctx, findPostCommentById, id)
	var i PostComment
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.ParentID,
	)
	return i, err
}

const getPostCommentCount = `-- name: GetPostCommentCount :one
SELECT COUNT(*)
FROM post_comments
WHERE post_id = $1
`

func (q *Queries) GetPostCommentCount(ctx context.Context, postID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostCommentCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostComments = `-- name: GetPostComments :many
SELECT users.created_at, users.updated_at, users.deleted_at, users.id, users.username, users.password, post_comments.created_at, post_comments.updated_at, post_comments.deleted_at, post_comments.id, post_comments.post_id, post_comments.user_id, post_comments.text, post_comments.parent_id
FROM post_comments
LEFT JOIN users ON post_comments.user_id = users.id
WHERE post_id = $1
`

type GetPostCommentsRow struct {
	User      User          `json:"user"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
	DeletedAt sql.NullTime  `json:"deleted_at"`
	ID        int64         `json:"id"`
	PostID    int64         `json:"post_id"`
	UserID    int64         `json:"user_id"`
	Text      string        `json:"text"`
	ParentID  sql.NullInt64 `json:"parent_id"`
}

func (q *Queries) GetPostComments(ctx context.Context, postID int64) ([]GetPostCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostComments, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostCommentsRow{}
	for rows.Next() {
		var i GetPostCommentsRow
		if err := rows.Scan(
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.DeletedAt,
			&i.User.ID,
			&i.User.Username,
			&i.User.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Text,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostCommentText = `-- name: UpdatePostCommentText :exec
UPDATE post_comments
SET text = $1
WHERE id = $2
`

type UpdatePostCommentTextParams struct {
	Text string `json:"text"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdatePostCommentText(ctx context.Context, arg UpdatePostCommentTextParams) error {
	_, err := q.db.ExecContext(ctx, updatePostCommentText, arg.Text, arg.ID)
	return err
}
