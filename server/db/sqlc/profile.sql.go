// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: profile.sql

package dbconnection

import (
	"context"
	"database/sql"
)

const getUserOverviewPostsAndComments = `-- name: GetUserOverviewPostsAndComments :many
Select 
subreadits.name as subreadit_name,
post_users.username as post_username,
posts.id, 
posts.created_at, posts.updated_at, posts.deleted_at,
posts.title, posts.user_id, posts.subreadit_id, posts.text,
(SELECT sum(value) FROM post_votes WHERE post_id = posts.id) as totalVoteValue,
(SELECT count(*) FROM post_comments WHERE post_id = posts.id AND post_comments.deleted_at IS NULL) as numberOfComments,

post_votes.user_id,
post_votes.value as postUserVoteValue,

post_comment_users.username as post_comment_username,
post_comments.id, post_comments.created_at, post_comments.updated_at, post_comments.post_id, post_comments.user_id, post_comments.text, post_comments.parent_id,
(SELECT sum(value) FROM post_comment_votes WHERE post_comment_id = post_comments.id) as commentTotalVoteValue,

post_comment_votes.user_id,
post_comment_votes.value as postCommentUserVoteValue 

from post_comments

FULL OUTER JOIN posts 
ON post_comments.post_id = posts.id AND post_comments.user_id = $1

LEFT JOIN users as post_users
ON posts.user_id = post_users.id

LEFT JOIN users as post_comment_users
ON post_comments.user_id = post_comment_users.id AND post_comment_users.id = $2

LEFT JOIN subreadits
ON posts.subreadit_id = subreadits.id

LEFT JOIN post_votes
ON post_votes.post_id = posts.id AND post_votes.user_id = $3

LEFT JOIN post_comment_votes
ON post_comment_votes.post_comment_id = post_comments.id AND post_comment_votes.user_id = $4

where (post_comments.user_id = $5 or posts.user_id = $6)
ORDER BY posts.created_at DESC, post_comments.created_at DESC
`

type GetUserOverviewPostsAndCommentsParams struct {
	UserID   int64 `json:"user_id"`
	ID       int64 `json:"id"`
	UserID_2 int64 `json:"user_id_2"`
	UserID_3 int64 `json:"user_id_3"`
	UserID_4 int64 `json:"user_id_4"`
	UserID_5 int64 `json:"user_id_5"`
}

type GetUserOverviewPostsAndCommentsRow struct {
	SubreaditName            sql.NullString `json:"subreadit_name"`
	PostUsername             sql.NullString `json:"post_username"`
	ID                       sql.NullInt64  `json:"id"`
	CreatedAt                sql.NullTime   `json:"created_at"`
	UpdatedAt                sql.NullTime   `json:"updated_at"`
	DeletedAt                sql.NullTime   `json:"deleted_at"`
	Title                    sql.NullString `json:"title"`
	UserID                   sql.NullInt64  `json:"user_id"`
	SubreaditID              sql.NullInt64  `json:"subreadit_id"`
	Text                     sql.NullString `json:"text"`
	Totalvotevalue           int64          `json:"totalvotevalue"`
	Numberofcomments         int64          `json:"numberofcomments"`
	UserID_2                 sql.NullInt64  `json:"user_id_2"`
	Postuservotevalue        sql.NullInt32  `json:"postuservotevalue"`
	PostCommentUsername      sql.NullString `json:"post_comment_username"`
	ID_2                     sql.NullInt64  `json:"id_2"`
	CreatedAt_2              sql.NullTime   `json:"created_at_2"`
	UpdatedAt_2              sql.NullTime   `json:"updated_at_2"`
	PostID                   sql.NullInt64  `json:"post_id"`
	UserID_3                 sql.NullInt64  `json:"user_id_3"`
	Text_2                   sql.NullString `json:"text_2"`
	ParentID                 sql.NullInt64  `json:"parent_id"`
	Commenttotalvotevalue    int64          `json:"commenttotalvotevalue"`
	UserID_4                 sql.NullInt64  `json:"user_id_4"`
	Postcommentuservotevalue sql.NullInt32  `json:"postcommentuservotevalue"`
}

func (q *Queries) GetUserOverviewPostsAndComments(ctx context.Context, arg GetUserOverviewPostsAndCommentsParams) ([]GetUserOverviewPostsAndCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserOverviewPostsAndComments,
		arg.UserID,
		arg.ID,
		arg.UserID_2,
		arg.UserID_3,
		arg.UserID_4,
		arg.UserID_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserOverviewPostsAndCommentsRow{}
	for rows.Next() {
		var i GetUserOverviewPostsAndCommentsRow
		if err := rows.Scan(
			&i.SubreaditName,
			&i.PostUsername,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.UserID,
			&i.SubreaditID,
			&i.Text,
			&i.Totalvotevalue,
			&i.Numberofcomments,
			&i.UserID_2,
			&i.Postuservotevalue,
			&i.PostCommentUsername,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PostID,
			&i.UserID_3,
			&i.Text_2,
			&i.ParentID,
			&i.Commenttotalvotevalue,
			&i.UserID_4,
			&i.Postcommentuservotevalue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
