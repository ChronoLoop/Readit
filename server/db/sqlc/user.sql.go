// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package dbconnection

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username, password
) VALUES (
    $1, $2
)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Password)
	return err
}

const findUserById = `-- name: FindUserById :one
SELECT created_at, updated_at, deleted_at, id, username, password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const findUserByName = `-- name: FindUserByName :one
SELECT created_at, updated_at, deleted_at, id, username, password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) FindUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByName, username)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.Username,
		&i.Password,
	)
	return i, err
}
