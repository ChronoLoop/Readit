// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: vote.sql

package dbconnection

import (
	"context"
)

const createPostCommentVote = `-- name: CreatePostCommentVote :exec

INSERT INTO post_comment_votes (
    user_id,
    post_comment_id,
    value
) VALUES (
    $1, $2, $3
)
`

type CreatePostCommentVoteParams struct {
	UserID        int64 `json:"user_id"`
	PostCommentID int64 `json:"post_comment_id"`
	Value         int32 `json:"value"`
}

// Post Comments
func (q *Queries) CreatePostCommentVote(ctx context.Context, arg CreatePostCommentVoteParams) error {
	_, err := q.db.ExecContext(ctx, createPostCommentVote, arg.UserID, arg.PostCommentID, arg.Value)
	return err
}

const createPostVote = `-- name: CreatePostVote :exec

INSERT INTO post_votes (
    user_id,
    post_id,
    value
) VALUES (
    $1, $2, $3
)
`

type CreatePostVoteParams struct {
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
	Value  int32 `json:"value"`
}

// Posts
func (q *Queries) CreatePostVote(ctx context.Context, arg CreatePostVoteParams) error {
	_, err := q.db.ExecContext(ctx, createPostVote, arg.UserID, arg.PostID, arg.Value)
	return err
}

const findPostCommentVoteById = `-- name: FindPostCommentVoteById :one
SELECT created_at, updated_at, deleted_at, user_id, value, post_comment_id
FROM post_comment_votes
WHERE post_comment_id = $1 AND user_id = $2 LIMIT 1
`

type FindPostCommentVoteByIdParams struct {
	PostCommentID int64 `json:"post_comment_id"`
	UserID        int64 `json:"user_id"`
}

func (q *Queries) FindPostCommentVoteById(ctx context.Context, arg FindPostCommentVoteByIdParams) (PostCommentVote, error) {
	row := q.db.QueryRowContext(ctx, findPostCommentVoteById, arg.PostCommentID, arg.UserID)
	var i PostCommentVote
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Value,
		&i.PostCommentID,
	)
	return i, err
}

const findPostVoteById = `-- name: FindPostVoteById :one
SELECT created_at, updated_at, deleted_at, user_id, value, post_id FROM post_votes
WHERE post_id = $1 AND user_id = $2 LIMIT 1
`

type FindPostVoteByIdParams struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) FindPostVoteById(ctx context.Context, arg FindPostVoteByIdParams) (PostVote, error) {
	row := q.db.QueryRowContext(ctx, findPostVoteById, arg.PostID, arg.UserID)
	var i PostVote
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Value,
		&i.PostID,
	)
	return i, err
}

const getPostCommentTotalVoteValue = `-- name: GetPostCommentTotalVoteValue :one
SELECT SUM(value)
FROM post_comment_votes
WHERE post_comment_id = $1
`

func (q *Queries) GetPostCommentTotalVoteValue(ctx context.Context, postCommentID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostCommentTotalVoteValue, postCommentID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getPostTotalVoteValue = `-- name: GetPostTotalVoteValue :one
SELECT SUM(value)
FROM post_votes
WHERE post_id = $1
`

func (q *Queries) GetPostTotalVoteValue(ctx context.Context, postID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostTotalVoteValue, postID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const updatePostCommentVoteValue = `-- name: UpdatePostCommentVoteValue :exec
UPDATE post_comment_votes
SET value = $1
WHERE user_id = $2 AND post_comment_id = $3
`

type UpdatePostCommentVoteValueParams struct {
	Value         int32 `json:"value"`
	UserID        int64 `json:"user_id"`
	PostCommentID int64 `json:"post_comment_id"`
}

func (q *Queries) UpdatePostCommentVoteValue(ctx context.Context, arg UpdatePostCommentVoteValueParams) error {
	_, err := q.db.ExecContext(ctx, updatePostCommentVoteValue, arg.Value, arg.UserID, arg.PostCommentID)
	return err
}

const updatePostVoteValue = `-- name: UpdatePostVoteValue :exec
UPDATE post_votes
SET value = $1
WHERE user_id = $2 AND post_id = $3
`

type UpdatePostVoteValueParams struct {
	Value  int32 `json:"value"`
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) UpdatePostVoteValue(ctx context.Context, arg UpdatePostVoteValueParams) error {
	_, err := q.db.ExecContext(ctx, updatePostVoteValue, arg.Value, arg.UserID, arg.PostID)
	return err
}
